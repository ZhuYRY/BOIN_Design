knitr::opts_chunk$set(echo = FALSE)
# make sure all the data diles and Rmd files are in the same folder
path = getwd()
setwd(path)
#set.seed(2021)
for (package in c('readxl', 'BOIN', 'escalation', 'tibble', 'dplyr')) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
DLT_15 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.15"))
DLT_20 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.2"))
DLT_25 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.25"))
DLT_30 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.3"))
nsim = 1000  # number of simulation/repetition
nobs = 30    # sample size: total available patients
# i. PCS
PCS_lBOIN = rep(0,16)
PCS_3p3 = rep(0,16)
# ii. Avg # of patients at MTD
AvgMTD_lBOIN = rep(0,16)
AvgMTD_3p3 = rep(0,16)
# iii. risk of overdosing of over 60% or 80% of the participants
od60_lBOIN = rep(0,16)
od60_3p3 = rep(0,16)
od80_lBOIN = rep(0,16)
od80_3p3 = rep(0,16)
# iv. risk of underdosing of over 80% of patients
ud80_lBOIN = rep(0,16)
ud80_3p3 = rep(0,16)
nsim=10
DLT_true = 0.2
i = 16
#for (i in 1:nrow(DLT_20)) {
# S = probability vector in a scenario
S = as.list(DLT_20[DLT_20$Scenario==i,][2:6])
S = as.double(S)
# idx = which one is the targeted DLT rate
idx = which(S == DLT_true)[1]
### local BOIN
result_lBOIN = get.oc(target = DLT_true, p.true = S,
ncohort=10, cohortsize=3, startdose=1, ntrial=nsim)
PCS_lBOIN[i] = result_lBOIN$selpercent[idx]    # i.Correct selection rate
AvgMTD_lBOIN[i] = result_lBOIN$npatients[idx]  # ii.Avg # at MTD
od60_lBOIN[i] = result_lBOIN$overdose60        # iii.>60% OD
od80_lBOIN[i] = result_lBOIN$overdose80        # iv.>80% OD
### 3+3
sims <- get_three_plus_three(num_doses = 5, allow_deescalate = FALSE) %>%
simulate_trials(num_sims = nsim, true_prob_tox = S)
PCS_3p3[i] = prob_recommend(sims)[idx+1]
tab = as_tibble(sims)
tab = as.data.frame(tab)
tot_at_MTD = rep(0, nsim)
od_60 = 0
od_80 = 0
for (m in 1:nsim) {
tab_n = tab %>% filter(tab$.iteration == m)
#n_at_MTD = tab_n %>% filter(tab_n$dose == idx) %>% select(n)
#tot_at_MTD[m] = n_at_MTD$n
# n_at_MTD = tab_n %>% filter(tab_n$recommended==TRUE) %>% select(n)
# n_at_MTD = tab_n %>% filter(tab_n$dose == idx) %>% select(n)
# tot_at_MTD[m] = 30 - sum(tab_n$n) + n_at_MTD$n
# # of patients at selected MTD
n_at_sMTD = tab_n %>% filter(tab_adj$recommended==TRUE) %>% select(n)
treat_at_sMTD = 30 - sum(tab_n$n) + n_at_sMTD$n
# Reassign # patients at each dose level:
# remaining patients go to selected MTD
tab_adj = tab_n %>%
select(dose, n, recommended) %>%
mutate(new_n = ifelse(recommended==TRUE, treat_at_sMTD,
ifelse(recommended==FALSE, n, NA)))
# # of patients at true MTD
n_at_MTD = tab_adj %>% filter(tab_adj$dose == idx) %>% select(new_n)
tot_at_MTD[m] = n_at_MTD$new_n
# # of OD
tab_od = tab_adj %>% filter(dose > idx) %>% select(new_n)
n_od = ifelse(nrow(tab_od) > 0, sum(tab_od),
ifelse(nrow(tab_od) == 0, 0, NA))
# OD 60%
if (n_od >= 30*0.6) {
od_60 = od_60 + 1
# OD 80%
} else if (n_od >= 30*0.8) {
od_80 = od_80 + 1
}
#  }
AvgMTD_3p3[i] = mean(tot_at_MTD)
od60_3p3[i] = od_60/nsim
od80_3p3[i] = od_80/nsim
}
rlang::last_error()
m
tab
tab_n
tab_adj
tab_adj = tab_n %>% select(dose, n, recommended)
tab_adj
tab_adj = tab_n %>% select(dose, n, recommended) %>%  mutate(new_n = ifelse(recommended==TRUE, treat_at_sMTD,
ifelse(recommended==FALSE, n, NA)))
n_at_sMTD
nsim=10
DLT_true = 0.2
i = 16
#for (i in 1:nrow(DLT_20)) {
# S = probability vector in a scenario
S = as.list(DLT_20[DLT_20$Scenario==i,][2:6])
nsim = 1000  # number of simulation/repetition
nobs = 30    # sample size: total available patients
# i. PCS
PCS_lBOIN = rep(0,16)
PCS_3p3 = rep(0,16)
# ii. Avg # of patients at MTD
AvgMTD_lBOIN = rep(0,16)
AvgMTD_3p3 = rep(0,16)
# iii. risk of overdosing of over 60% or 80% of the participants
od60_lBOIN = rep(0,16)
od60_3p3 = rep(0,16)
od80_lBOIN = rep(0,16)
od80_3p3 = rep(0,16)
# iv. risk of underdosing of over 80% of patients
ud80_lBOIN = rep(0,16)
ud80_3p3 = rep(0,16)
# make sure all the data diles and Rmd files are in the same folder
path = getwd()
setwd(path)
#set.seed(2021)
for (package in c('readxl', 'BOIN', 'escalation', 'tibble', 'dplyr')) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
DLT_15 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.15"))
DLT_20 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.2"))
DLT_25 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.25"))
DLT_30 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.3"))
nsim=10
DLT_true = 0.2
i = 16
#for (i in 1:nrow(DLT_20)) {
# S = probability vector in a scenario
S = as.list(DLT_20[DLT_20$Scenario==i,][2:6])
S = as.double(S)
# idx = which one is the targeted DLT rate
idx = which(S == DLT_true)[1]
### local BOIN
result_lBOIN = get.oc(target = DLT_true, p.true = S,
ncohort=10, cohortsize=3, startdose=1, ntrial=nsim)
PCS_lBOIN[i] = result_lBOIN$selpercent[idx]    # i.Correct selection rate
AvgMTD_lBOIN[i] = result_lBOIN$npatients[idx]  # ii.Avg # at MTD
od60_lBOIN[i] = result_lBOIN$overdose60        # iii.>60% OD
od80_lBOIN[i] = result_lBOIN$overdose80        # iv.>80% OD
### 3+3
sims <- get_three_plus_three(num_doses = 5, allow_deescalate = FALSE) %>%
simulate_trials(num_sims = nsim, true_prob_tox = S)
PCS_3p3[i] = prob_recommend(sims)[idx+1]
tab = as_tibble(sims)
tab = as.data.frame(tab)
tot_at_MTD = rep(0, nsim)
od_60 = 0
od_80 = 0
for (m in 1:nsim) {
tab_n = tab %>% filter(tab$.iteration == m)
#n_at_MTD = tab_n %>% filter(tab_n$dose == idx) %>% select(n)
#tot_at_MTD[m] = n_at_MTD$n
# n_at_MTD = tab_n %>% filter(tab_n$recommended==TRUE) %>% select(n)
# n_at_MTD = tab_n %>% filter(tab_n$dose == idx) %>% select(n)
# tot_at_MTD[m] = 30 - sum(tab_n$n) + n_at_MTD$n
# # of patients at selected MTD
n_at_sMTD = tab_n %>% filter(tab_n$recommended==TRUE) %>% select(n)
treat_at_sMTD = 30 - sum(tab_n$n) + n_at_sMTD$n
# Reassign # patients at each dose level:
# remaining patients go to selected MTD
tab_adj = tab_n %>%
select(dose, n, recommended) %>%
mutate(new_n = ifelse(recommended==TRUE, treat_at_sMTD,
ifelse(recommended==FALSE, n, NA)))
# # of patients at true MTD
n_at_MTD = tab_adj %>% filter(tab_adj$dose == idx) %>% select(new_n)
tot_at_MTD[m] = n_at_MTD$new_n
# # of OD
tab_od = tab_adj %>% filter(dose > idx) %>% select(new_n)
n_od = ifelse(nrow(tab_od) > 0, sum(tab_od),
ifelse(nrow(tab_od) == 0, 0, NA))
# OD 60%
if (n_od >= 30*0.6) {
od_60 = od_60 + 1
# OD 80%
} else if (n_od >= 30*0.8) {
od_80 = od_80 + 1
}
#  }
AvgMTD_3p3[i] = mean(tot_at_MTD)
od60_3p3[i] = od_60/nsim
od80_3p3[i] = od_80/nsim
}
# make sure all the data diles and Rmd files are in the same folder
path = getwd()
setwd(path)
#set.seed(2021)
for (package in c('readxl', 'BOIN', 'escalation', 'tibble', 'dplyr')) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
DLT_15 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.15"))
DLT_20 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.2"))
DLT_25 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.25"))
DLT_30 = as.data.frame.list(read_excel("ToxicityScenarios_DLTrates.xlsx", sheet = "DLT=0.3"))
nsim = 1000  # number of simulation/repetition
nobs = 30    # sample size: total available patients
# i. PCS
PCS_lBOIN = rep(0,16)
PCS_3p3 = rep(0,16)
# ii. Avg # of patients at MTD
AvgMTD_lBOIN = rep(0,16)
AvgMTD_3p3 = rep(0,16)
# iii. risk of overdosing of over 60% or 80% of the participants
od60_lBOIN = rep(0,16)
od60_3p3 = rep(0,16)
od80_lBOIN = rep(0,16)
od80_3p3 = rep(0,16)
# iv. risk of underdosing of over 80% of patients
ud80_lBOIN = rep(0,16)
ud80_3p3 = rep(0,16)
nsim=10
DLT_true = 0.2
for (i in 1:nrow(DLT_20)) {
# S = probability vector in a scenario
S = as.list(DLT_20[DLT_20$Scenario==i,][2:6])
S = as.double(S)
# idx = which one is the targeted DLT rate
idx = which(S == DLT_true)[1]
### local BOIN
result_lBOIN = get.oc(target = DLT_true, p.true = S,
ncohort=10, cohortsize=3, startdose=1, ntrial=nsim)
PCS_lBOIN[i] = result_lBOIN$selpercent[idx]    # i.Correct selection rate
AvgMTD_lBOIN[i] = result_lBOIN$npatients[idx]  # ii.Avg # at MTD
od60_lBOIN[i] = result_lBOIN$overdose60        # iii.>60% OD
od80_lBOIN[i] = result_lBOIN$overdose80        # iv.>80% OD
### 3+3
sims <- get_three_plus_three(num_doses = 5, allow_deescalate = FALSE) %>%
simulate_trials(num_sims = nsim, true_prob_tox = S)
PCS_3p3[i] = prob_recommend(sims)[idx+1]
tab = as_tibble(sims)
tab = as.data.frame(tab)
tot_at_MTD = rep(0, nsim)
od_60 = 0
od_80 = 0
for (m in 1:nsim) {
tab_n = tab %>% filter(tab$.iteration == m)
#n_at_MTD = tab_n %>% filter(tab_n$dose == idx) %>% select(n)
#tot_at_MTD[m] = n_at_MTD$n
# n_at_MTD = tab_n %>% filter(tab_n$recommended==TRUE) %>% select(n)
# n_at_MTD = tab_n %>% filter(tab_n$dose == idx) %>% select(n)
# tot_at_MTD[m] = 30 - sum(tab_n$n) + n_at_MTD$n
# # of patients at selected MTD
n_at_sMTD = tab_n %>% filter(tab_n$recommended==TRUE) %>% select(n)
treat_at_sMTD = 30 - sum(tab_n$n) + n_at_sMTD$n
# Reassign # patients at each dose level:
# remaining patients go to selected MTD
tab_adj = tab_n %>%
select(dose, n, recommended) %>%
mutate(new_n = ifelse(recommended==TRUE, treat_at_sMTD,
ifelse(recommended==FALSE, n, NA)))
# # of patients at true MTD
n_at_MTD = tab_adj %>% filter(tab_adj$dose == idx) %>% select(new_n)
tot_at_MTD[m] = n_at_MTD$new_n
# # of OD
tab_od = tab_adj %>% filter(dose > idx) %>% select(new_n)
n_od = ifelse(nrow(tab_od) > 0, sum(tab_od),
ifelse(nrow(tab_od) == 0, 0, NA))
# OD 60%
if (n_od >= 30*0.6) {
od_60 = od_60 + 1
# OD 80%
} else if (n_od >= 30*0.8) {
od_80 = od_80 + 1
}
}
AvgMTD_3p3[i] = mean(tot_at_MTD)
od60_3p3[i] = od_60/nsim
od80_3p3[i] = od_80/nsim
}
##############################
### This chunk is my draft ###
### Please ignore          ###
##############################
i = 1
DLT_true = 0.2
S = as.list(DLT_20[DLT_20$Scenario==i,][2:6])
S = as.double(S) # S = 0.08 0.15 0.20 0.25 0.35
idx = which(S == DLT_true)[1] # idx = 3
sims <- get_three_plus_three(num_doses = 5, allow_deescalate = FALSE) %>%
simulate_trials(num_sims = nsim, true_prob_tox = S)
tab = as_tibble(sims)
tab = as.data.frame(tab)
#tab
tot_at_MTD = rep(0, nsim)
od_60 = 0
od_80 = 0
for (m in 1:nsim) {
num = 0
tab_n = tab %>% filter(tab$.iteration == m)
n_at_sMTD = tab_n %>% filter(tab_n$recommended==TRUE) %>% select(n)
n_at_MTD = tab_n %>% filter(tab_n$dose == idx) %>% select(n)
tot_at_MTD[m] = n_at_MTD$n
treat_at_sMTD = 30 - sum(tab_n$n) + n_at_sMTD$n
tab_od = tab_n %>%
select(dose, n, recommended) %>%
mutate(new_n = ifelse(recommended==TRUE, treat_at_sMTD,
ifelse(recommended==FALSE, n, NA))) %>%
filter(dose > idx) %>%
select(new_n)
#tab_od = tab_od %>% filter(tab_od$dose > idx) %>% select(new_n)
n_od = ifelse(nrow(tab_od) > 0, sum(tab_od),
ifelse(nrow(tab_od) == 0, 0, NA))
if (n_od >= 30*0.6) {
od_60 = od_60 + 1
} else if (n_od >= 30*0.8) {
od_80 = od_80 + 1
}
#tot_od = tab_n %>% filter(tab_n$dose > idx) %>% sum()
#tab[tab$recommended == TRUE]
#sum(tab)
#   j = 1
#   while (tab_i[j,]$recommended == FALSE) {
#     num = num + tab_i[j,]$n
#     j = j + 1
#   }
#   avg[i] = 30-num
}
mean(tot_at_MTD)
paste("od_60", od_60)
paste("od_80", od_80)
nsim=10
DLT_true = 0.2
for (i in 1:nrow(DLT_20)) {
# S = probability vector in a scenario
S = as.list(DLT_20[DLT_20$Scenario==i,][2:6])
S = as.double(S)
# idx = which one is the targeted DLT rate
idx = which(S == DLT_true)[1]
### local BOIN
result_lBOIN = get.oc(target = DLT_true, p.true = S,
ncohort=10, cohortsize=3, startdose=1, ntrial=nsim)
PCS_lBOIN[i] = result_lBOIN$selpercent[idx]    # i.Correct selection rate
AvgMTD_lBOIN[i] = result_lBOIN$npatients[idx]  # ii.Avg # at MTD
od60_lBOIN[i] = result_lBOIN$overdose60        # iii.>60% OD
od80_lBOIN[i] = result_lBOIN$overdose80        # iv.>80% OD
### 3+3
sims <- get_three_plus_three(num_doses = 5, allow_deescalate = FALSE) %>%
simulate_trials(num_sims = nsim, true_prob_tox = S)
PCS_3p3[i] = prob_recommend(sims)[idx+1]
tab = as_tibble(sims)
tab = as.data.frame(tab)
tot_at_MTD = rep(0, nsim)
od_60 = 0
od_80 = 0
for (m in 1:nsim) {
tab_n = tab %>% filter(tab$.iteration == m)
#n_at_MTD = tab_n %>% filter(tab_n$dose == idx) %>% select(n)
#tot_at_MTD[m] = n_at_MTD$n
# n_at_MTD = tab_n %>% filter(tab_n$recommended==TRUE) %>% select(n)
# n_at_MTD = tab_n %>% filter(tab_n$dose == idx) %>% select(n)
# tot_at_MTD[m] = 30 - sum(tab_n$n) + n_at_MTD$n
# # of patients at selected MTD
n_at_sMTD = tab_n %>% filter(tab_n$recommended==TRUE) %>% select(n)
treat_at_sMTD = 30 - sum(tab_n$n) + n_at_sMTD$n
# Reassign # patients at each dose level:
# remaining patients go to selected MTD
tab_adj = tab_n %>%
select(dose, n, recommended) %>%
mutate(new_n = ifelse(recommended==TRUE, treat_at_sMTD,
ifelse(recommended==FALSE, n, NA)))
# # of patients at true MTD
n_at_MTD = tab_adj %>% filter(tab_adj$dose == idx) %>% select(new_n)
tot_at_MTD[m] = n_at_MTD$new_n
# # of OD
tab_od = tab_adj %>% filter(dose > idx) %>% select(new_n)
n_od = ifelse(nrow(tab_od) > 0, sum(tab_od),
ifelse(nrow(tab_od) == 0, 0, NA))
# OD 60%
if (n_od >= 30*0.6) {
od_60 = od_60 + 1
# OD 80%
} else if (n_od >= 30*0.8) {
od_80 = od_80 + 1
}
}
AvgMTD_3p3[i] = mean(tot_at_MTD)
od60_3p3[i] = od_60/nsim
od80_3p3[i] = od_80/nsim
}
set.seed(123)
rnorm
rnorm(5)
knitr::opts_chunk$set(echo = TRUE)
# make sure all the data diles and Rmd files are in the same folder
path = getwd()
setwd(path)
library(fitdistrplus)
library(readxl)
library(writexl)
Col_models = read_excel("DataUsed.xlsx", sheet = "Col_models")
Noab_models = read_excel("DataUsed.xlsx", sheet = "Noab_models")
Col_models = Col_models[-1,]
Noab_models = Noab_models[-1,]
orig_col = read_excel("OriginalData.xlsx", sheet = "Col")
orig_Noab = read_excel("OriginalData.xlsx", sheet = "Noab")
install.packages("preseqR")
# make sure all the data diles and Rmd files are in the same folder
path = getwd()
setwd(path)
library(fitdistrplus)
library(readxl)
library(writexl)
library(preseqR)
orig_col
n = orig_col
preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
typeof(n)
typeof(orig_col)
dim(orig_col)
checking.hist
orig_col
#preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
as.data.frame(orig_col)
#orig_col
#preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
#orig_col
typeof(n)
n = as.data.frame(orig_col)
#orig_col
typeof(n)
#preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
n = as.data.frame(orig_col)
#orig_col
typeof(n)
#preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
n
orig_col
n = as.data.frame(orig_col)
#orig_col
#typeof(n)
preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
#n = as.data.frame(orig_col)
#orig_col
#typeof(n)
#preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
library(preseqR)
## import data
data(FisherButterfly)
## print the parameters of a fitting negative binomial distribution
preseqR.ztnb.em(FisherButterfly)
#n = as.data.frame(orig_col)
#orig_col
#typeof(n)
#preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
library(preseqR)
## import data
data(FisherButterfly)
## print the parameters of a fitting negative binomial distribution
#preseqR.ztnb.em(FisherButterfly)
#n = as.data.frame(orig_col)
#orig_col
#typeof(n)
#preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
library(preseqR)
## import data
n = data(FisherButterfly)
n
## print the parameters of a fitting negative binomial distribution
#preseqR.ztnb.em(FisherButterfly)
View(FisherButterfly)
View(orig_col)
n = as.data.frame(orig_col)
#orig_col
#typeof(n)
#preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
library(preseqR)
## import data
#n = data(FisherButterfly)
## print the parameters of a fitting negative binomial distribution
preseqR.ztnb.em(n)
n = as.data.frame(orig_col)
n = n[:20]
n = as.data.frame(orig_col)
n = n[:20,]
n = as.data.frame(orig_col)
n = n[1:20,]
#orig_col
#typeof(n)
#preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
#library(preseqR)
## import data
#n = data(FisherButterfly)
## print the parameters of a fitting negative binomial distribution
#preseqR.ztnb.em(n)
View(n)
n = as.data.frame(orig_col)
n = n[1:20,]
#orig_col
#typeof(n)
#preseqR.ztnb.em(n, size = SIZE.INIT, mu = MU.INIT)
#library(preseqR)
## import data
#n = data(FisherButterfly)
## print the parameters of a fitting negative binomial distribution
preseqR.ztnb.em(n)
