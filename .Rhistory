}
p_j_min2 <- function(p_j_min1, sigma1, mu1) {
z_p_jmin1 = qnorm(p_j_min1, 0, 1)
e_j_min2 = rnorm(1, mu1, sigma1)
p_j_min2 = pnorm(z_p_jmin1 - e_j_min2^2)
return(p_j_min2)
}
p_j_plus2 <- function(p_j_plus1, sigma2, mu2) {
z_p_jplus1 = qnorm(p_j_plus1, 0, 1)
e_j_plus2 = rnorm(1, mu2, sigma2)
p_j_plus2 = pnorm(z_p_jplus1 + e_j_plus2^2)
return(p_j_plus2)
}
prob_list <- function(j,p_j,p_lis,phi,sigma1,sigma2,mu1,mu2){
p_lis[j] = p_j
if (j == 1) {
p_lis[2] = p_j_plus1(p_j, phi, sigma2, mu2)
p_lis[3] = p_j_plus2(p_lis[2], sigma2, mu2)
p_lis[4] = p_j_plus2(p_lis[3], sigma2, mu2)
p_lis[5] = p_j_plus2(p_lis[4], sigma2, mu2)
}
else if (j == 2) {
p_lis[1] = p_j_min1(p_j, phi, sigma1, mu1)
p_lis[3] = p_j_plus1(p_j, phi, sigma2, mu2)
p_lis[4] = p_j_plus2(p_lis[3], sigma2, mu2)
p_lis[5] = p_j_plus2(p_lis[4], sigma2, mu2)
}
else if (j == 3) {
p_lis[2] = p_j_min1(p_j, phi, sigma1, mu1)
p_lis[1] = p_j_min2(p_lis[2], sigma1, mu1)
p_lis[4] = p_j_plus1(p_j, phi, sigma2, mu2)
p_lis[5] = p_j_plus2(p_lis[4], sigma2, mu2)
}
else if (j == 4) {
p_lis[5] = p_j_plus1(p_j, phi, sigma2, mu2)
p_lis[3] = p_j_min1(p_j, phi, sigma1, mu1)
p_lis[2] = p_j_min2(p_lis[3], sigma1, mu1)
p_lis[1] = p_j_min2(p_lis[2], sigma1, mu1)
}
else { # j ==5
p_lis[4] = p_j_min1(p_j, phi, sigma1, mu1)
p_lis[3] = p_j_min2(p_lis[4], sigma1, mu1)
p_lis[2] = p_j_min2(p_lis[3], sigma1, mu1)
p_lis[1] = p_j_min2(p_lis[2], sigma1, mu1)
}
return(p_lis)
}
p_mat = matrix(0, nrow = 10, ncol = 5)
for (i in 1:10) {
j = sample(1:5,1)
z_phi = qnorm(phi, 0, 1) # z(phi)
e_j = rnorm(1, mean = z_phi, sd = sigma0)
p_j = pnorm(e_j, 0, 1)   # Phi(e_j)
p_lis = rep(0,5)
p_mat[i,] = prob_list(j,p_j,p_lis,phi,sigma1,sigma2,mu1,mu2)
}
# j = sample(1:5,1)
# z_phi = qnorm(phi, 0, 1) # z(phi)
# e_j = rnorm(1, mean = z_phi, sd = sigma0)
# p_j = pnorm(e_j, 0, 1)   # Phi(e_j)
# j
# p_j
#
# p_lis = rep(0,5)
# p_lis[j] = p_j
# p_lis
#
# prob_lis = prob_list(j,p_j,p_lis,phi,sigma1,sigma2,mu1,mu2)
p_mat
#get.oc(target = phi, p.true = prob_lis, ncohort = 10, cohortsize = 3,
#       ntrial = 10000)
1:5
xdata = 1:5
xdata
?lines
xdata = 1:5
plot(x=1:5, y)
xdata = 1:5
#plot(x=1:5, y)
#get.oc(target = phi, p.true = prob_lis, ncohort = 10, cohortsize = 3,
#       ntrial = 10000)
plot(xdata, p_mat[1,], type="o", pch="o", lty=1, ylim=c(0,1) )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
#points(xdata, p_mat[1,], col="red", pch="*")
lines(xdata, p_mat[2,], type="o",col="red",lty=2)
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
# points(xdata, y3, col="dark red",pch="+")
# lines(xdata, y3, col="dark red", lty=3)
xdata = 1:5
#plot(x=1:5, y)
#get.oc(target = phi, p.true = prob_lis, ncohort = 10, cohortsize = 3,
#       ntrial = 10000)
plot(xdata, p_mat[1,], type="o", pch="o", lty=1, ylim=c(0,1) )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
#points(xdata, p_mat[1,], col="red", pch="*")
for (i in 2:10) {
lines(xdata, p_mat[i,], type="o",lty=2)
}
#lines(xdata, p_mat[2,], type="o",col="red",lty=2)
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
# points(xdata, y3, col="dark red",pch="+")
# lines(xdata, y3, col="dark red", lty=3)
xdata = 1:5
#plot(x=1:5, y)
#get.oc(target = phi, p.true = prob_lis, ncohort = 10, cohortsize = 3,
#       ntrial = 10000)
plot(xdata, p_mat[1,], type="o", pch="o", lty=1, ylim=c(0,1) )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
#points(xdata, p_mat[1,], col="red", pch="*")
for (i in 2:10) {
points(xdata, p_mat[i,], col="red", pch="o")
lines(xdata, p_mat[i,], lty=2)
}
#lines(xdata, p_mat[2,], type="o",col="red",lty=2)
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
# points(xdata, y3, col="dark red",pch="+")
# lines(xdata, y3, col="dark red", lty=3)
xdata = 1:5
#plot(x=1:5, y)
#get.oc(target = phi, p.true = prob_lis, ncohort = 10, cohortsize = 3,
#       ntrial = 10000)
plot(xdata, p_mat[1,], type="o", pch="o", lty=1, ylim=c(0,1) )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
#points(xdata, p_mat[1,], col="red", pch="*")
for (i in 2:10) {
points(xdata, p_mat[i,], pch="o")
lines(xdata, p_mat[i,], lty=2)
}
#lines(xdata, p_mat[2,], type="o",col="red",lty=2)
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
# points(xdata, y3, col="dark red",pch="+")
# lines(xdata, y3, col="dark red", lty=3)
xdata = 1:5
#plot(x=1:5, y)
#get.oc(target = phi, p.true = prob_lis, ncohort = 10, cohortsize = 3,
#       ntrial = 10000)
plot(xdata, p_mat[1,], type="o", pch="o", lty=1, ylim=c(0,1) )
abline(y=0.25)
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
#points(xdata, p_mat[1,], col="red", pch="*")
for (i in 2:10) {
points(xdata, p_mat[i,], pch="o")
lines(xdata, p_mat[i,], lty=2)
}
#lines(xdata, p_mat[2,], type="o",col="red",lty=2)
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
# points(xdata, y3, col="dark red",pch="+")
# lines(xdata, y3, col="dark red", lty=3)
xdata = 1:5
#plot(x=1:5, y)
#get.oc(target = phi, p.true = prob_lis, ncohort = 10, cohortsize = 3,
#       ntrial = 10000)
plot(xdata, p_mat[1,], type="o", pch="o", lty=1, ylim=c(0,1) )
abline(h=0.25, col="blue")
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
#points(xdata, p_mat[1,], col="red", pch="*")
for (i in 2:10) {
points(xdata, p_mat[i,], pch="o")
lines(xdata, p_mat[i,], lty=2)
}
#lines(xdata, p_mat[2,], type="o",col="red",lty=2)
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
# points(xdata, y3, col="dark red",pch="+")
# lines(xdata, y3, col="dark red", lty=3)
p_mat = matrix(0, nrow = 10, ncol = 5)
for (i in 1:10) {
j = sample(1:5,1)
z_phi = qnorm(phi, 0, 1) # z(phi)
e_j = rnorm(1, mean = z_phi, sd = sigma0)
p_j = pnorm(e_j, 0, 1)   # Phi(e_j)
p_lis = rep(0,5)
p_mat[i,] = prob_list(j,p_j,p_lis,phi,sigma1,sigma2,mu1,mu2)
}
# j = sample(1:5,1)
# z_phi = qnorm(phi, 0, 1) # z(phi)
# e_j = rnorm(1, mean = z_phi, sd = sigma0)
# p_j = pnorm(e_j, 0, 1)   # Phi(e_j)
# j
# p_j
#
# p_lis = rep(0,5)
# p_lis[j] = p_j
# p_lis
#
# prob_lis = prob_list(j,p_j,p_lis,phi,sigma1,sigma2,mu1,mu2)
xdata = 1:5
#plot(x=1:5, y)
#get.oc(target = phi, p.true = prob_lis, ncohort = 10, cohortsize = 3,
#       ntrial = 10000)
plot(xdata, p_mat[1,], type="o", pch="o", lty=1, ylim=c(0,1) )
abline(h=0.25, col="blue")
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
#points(xdata, p_mat[1,], col="red", pch="*")
for (i in 2:10) {
points(xdata, p_mat[i,], pch="o")
lines(xdata, p_mat[i,], lty=2)
}
#lines(xdata, p_mat[2,], type="o",col="red",lty=2)
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
# points(xdata, y3, col="dark red",pch="+")
# lines(xdata, y3, col="dark red", lty=3)
xdata = 1:5
#plot(x=1:5, y)
#get.oc(target = phi, p.true = prob_lis, ncohort = 10, cohortsize = 3,
#       ntrial = 10000)
plot(xdata, p_mat[1,], type="o", pch="o", lty=1, ylim=c(0,1),
xlab="Dose level",
ylab="Toxicity probability")
abline(h=0.25, col="blue")
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
#points(xdata, p_mat[1,], col="red", pch="*")
for (i in 2:10) {
points(xdata, p_mat[i,], pch="o")
lines(xdata, p_mat[i,], lty=2)
}
#lines(xdata, p_mat[2,], type="o",col="red",lty=2)
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
# points(xdata, y3, col="dark red",pch="+")
# lines(xdata, y3, col="dark red", lty=3)
# target toxicity rate
phi = 0.25
# probability simulation parameters
sigma0 = 0.05
sigma1 = 0.35
sigma2 = 0.35
mu1 = 0.15
mu2 = 0.15
p_j_min1 <- function(p_j, phi, sigma1, mu1) {
z_p_j = qnorm(p_j,0,1)
z_2phiMinpj = qnorm(2*phi-p_j)
z_phi = qnorm(phi, 0, 1) # z(phi)
I = (z_p_j > z_phi)
e_j_min1 = rnorm(1, mu1, sigma1)
p_j_min1 = pnorm(z_p_j - (z_p_j - z_2phiMinpj)*I - e_j_min1^2, 0, 1)
return(p_j_min1)
}
p_j_plus1 <- function(p_j, phi, sigma2, mu2) {
z_p_j = qnorm(p_j,0,1)
z_2phiMinpj = qnorm(2*phi-p_j)
z_phi = qnorm(phi, 0, 1) # z(phi)
I = (z_p_j < z_phi)
e_j_plus1 = rnorm(1, mu2, sigma2)
p_j_plus1 = pnorm(z_p_j + (z_2phiMinpj - z_p_j)*I + e_j_plus1^2, 0, 1)
return(p_j_plus1)
}
p_j_min2 <- function(p_j_min1, sigma1, mu1) {
z_p_jmin1 = qnorm(p_j_min1, 0, 1)
e_j_min2 = rnorm(1, mu1, sigma1)
p_j_min2 = pnorm(z_p_jmin1 - e_j_min2^2)
return(p_j_min2)
}
p_j_plus2 <- function(p_j_plus1, sigma2, mu2) {
z_p_jplus1 = qnorm(p_j_plus1, 0, 1)
e_j_plus2 = rnorm(1, mu2, sigma2)
p_j_plus2 = pnorm(z_p_jplus1 + e_j_plus2^2)
return(p_j_plus2)
}
prob_list <- function(j,p_j,p_lis,phi,sigma1,sigma2,mu1,mu2){
p_lis[j] = p_j
if (j == 1) {
p_lis[2] = p_j_plus1(p_j, phi, sigma2, mu2)
p_lis[3] = p_j_plus2(p_lis[2], sigma2, mu2)
p_lis[4] = p_j_plus2(p_lis[3], sigma2, mu2)
p_lis[5] = p_j_plus2(p_lis[4], sigma2, mu2)
}
else if (j == 2) {
p_lis[1] = p_j_min1(p_j, phi, sigma1, mu1)
p_lis[3] = p_j_plus1(p_j, phi, sigma2, mu2)
p_lis[4] = p_j_plus2(p_lis[3], sigma2, mu2)
p_lis[5] = p_j_plus2(p_lis[4], sigma2, mu2)
}
else if (j == 3) {
p_lis[2] = p_j_min1(p_j, phi, sigma1, mu1)
p_lis[1] = p_j_min2(p_lis[2], sigma1, mu1)
p_lis[4] = p_j_plus1(p_j, phi, sigma2, mu2)
p_lis[5] = p_j_plus2(p_lis[4], sigma2, mu2)
}
else if (j == 4) {
p_lis[5] = p_j_plus1(p_j, phi, sigma2, mu2)
p_lis[3] = p_j_min1(p_j, phi, sigma1, mu1)
p_lis[2] = p_j_min2(p_lis[3], sigma1, mu1)
p_lis[1] = p_j_min2(p_lis[2], sigma1, mu1)
}
else { # j ==5
p_lis[4] = p_j_min1(p_j, phi, sigma1, mu1)
p_lis[3] = p_j_min2(p_lis[4], sigma1, mu1)
p_lis[2] = p_j_min2(p_lis[3], sigma1, mu1)
p_lis[1] = p_j_min2(p_lis[2], sigma1, mu1)
}
return(p_lis)
}
p_mat = matrix(0, nrow = 10, ncol = 5)
for (i in 1:10) {
j = sample(1:5,1)
z_phi = qnorm(phi, 0, 1) # z(phi)
e_j = rnorm(1, mean = z_phi, sd = sigma0)
p_j = pnorm(e_j, 0, 1)   # Phi(e_j)
p_lis = rep(0,5)
p_mat[i,] = prob_list(j,p_j,p_lis,phi,sigma1,sigma2,mu1,mu2)
}
# j = sample(1:5,1)
# z_phi = qnorm(phi, 0, 1) # z(phi)
# e_j = rnorm(1, mean = z_phi, sd = sigma0)
# p_j = pnorm(e_j, 0, 1)   # Phi(e_j)
# j
# p_j
#
# p_lis = rep(0,5)
# p_lis[j] = p_j
# p_lis
#
# prob_lis = prob_list(j,p_j,p_lis,phi,sigma1,sigma2,mu1,mu2)
xdata = 1:5
#plot(x=1:5, y)
#get.oc(target = phi, p.true = prob_lis, ncohort = 10, cohortsize = 3,
#       ntrial = 10000)
plot(xdata, p_mat[1,], type="o", pch="o", lty=1, ylim=c(0,1),
xlab="Dose level",
ylab="Toxicity probability")
abline(h=0.25, col="blue")
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
#points(xdata, p_mat[1,], col="red", pch="*")
for (i in 2:10) {
points(xdata, p_mat[i,], pch="o")
lines(xdata, p_mat[i,], lty=2)
}
#lines(xdata, p_mat[2,], type="o",col="red",lty=2)
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
# points(xdata, y3, col="dark red",pch="+")
# lines(xdata, y3, col="dark red", lty=3)
get.oc(target = phi,
p.true = p_mat[5,],
ncohort = 10,
cohortsize = 3)
get.oc(target = phi,
p.true = p_mat[6,],
ncohort = 10,
cohortsize = 3,
ntrial = 1000)
p_mat[6,]
DLT_20
S10 = DLT_20[DLT_20$Scenario==10,]
DLT_true = 0.2
S10
S10[2:6]
S10
get.oc(target = DLT_true,
p.true = S10,
ncohort = 10,
cohortsize = 3,
startdose = 1,
ntrial = 1000)
DLT_20
S10 = DLT_20[DLT_20$Scenario==10,][2:6]
DLT_true = 0.2
S10
[0.1, 0.2]
(0.1, 0.2)
DLT_20
S10 = DLT_20[DLT_20$Scenario==10,][2:6]
DLT_true = 0.2
S10
S1=list(0.05,	0.1,	0.2,	0.3,	0.45)
S1
get.oc(target = DLT_true,
p.true = S1,
ncohort = 10,
cohortsize = 3,
startdose = 1,
ntrial = 1000)
get.oc(target = DLT_true,
p.true = S10,
ncohort = 10,
cohortsize = 3,
startdose = 1,
ntrial = 1000)
DLT_20
S10 = DLT_20[DLT_20$Scenario==10,][2:6]
DLT_true = 0.2
S10
#S1=list(0.05,	0.1,	0.2,	0.3,	0.45)
#S1
get.oc(target = DLT_true,
p.true = S10,
ncohort = 10,
cohortsize = 3,
startdose = 1,
ntrial = 1000)
S10
DLT_20
S10 = DLT_20[DLT_20$Scenario==10,][2:6]
DLT_true = 0.2
S10 = list(S10)
S1=list(0.05,	0.1,	0.2,	0.3,	0.45)
S10
get.oc(target = DLT_true,
p.true = S10,
ncohort = 10,
cohortsize = 3,
startdose = 1,
ntrial = 1000)
get.oc(target = DLT_true,
p.true = S1,
ncohort = 10,
cohortsize = 3,
startdose = 1,
ntrial = 1000)
str(S1)
str(S10)
str(S1)
str(S10)
DLT_20
S10 = DLT_20[DLT_20$Scenario==10,][2:6]
DLT_true = 0.2
# S10 = list(S10)
S1=list(0.05,	0.1,	0.2,	0.3,	0.45)
str(S1)
str(S10)
DLT_20
S10 = DLT_20[DLT_20$Scenario==10,][2:6]
DLT_true = 0.2
S10 = as.list(S10)
S1=list(0.05,	0.1,	0.2,	0.3,	0.45)
str(S1)
str(S10)
get.oc(target = DLT_true,
p.true = S10,
ncohort = 10,
cohortsize = 3,
startdose = 1,
ntrial = 1000)
DLT_20
S10 = DLT_20[DLT_20$Scenario==10,][2:6]
DLT_true = 0.2
S10 = as.list(S10)
result
result = get.oc(target = DLT_true, p.true = S10,
ncohort=10, cohortsize=3, startdose=1, ntrial=1000)
result
result$lambda_e
result$lambda_d
result
result$selpercent[3]
PCS_lis = rep(0,16)
which(S10 == DLT_true)[1]
#result = get.oc(target = DLT_true, p.true = S10,
#                ncohort=10, cohortsize=3, startdose=1, ntrial=1000)
which(S10 == DLT_true)[1]+1
PCS_lis = rep(0,16)
a = 3
a = a+ which(S10 == DLT_true)[1]
#result = get.oc(target = DLT_true, p.true = S10,
#                ncohort=10, cohortsize=3, startdose=1, ntrial=1000)
a
length(DLT_20)
nrow(DLT_20)
PCS_lis
PCS_lis[a] = 6
PCS_lis
PCS_lis = rep(0,16)
for (i in 1:nrow(DLT_20)) {
S = as.list(DLT_20[DLT_20$Scenario==i,][2:6])
result = get.oc(target = DLT_true, p.true = S,
ncohort=10, cohortsize=3, startdose=1, ntrial=1000)
idx = which(S10 == DLT_true)[1]
PCS_lis[i] = result$selpercent[idx]
}
#result = get.oc(target = DLT_true, p.true = S10,
#                ncohort=10, cohortsize=3, startdose=1, ntrial=1000)
PCS_lis
PCS_lis = rep(0,16)
for (i in 1:nrow(DLT_20)) {
S = as.list(DLT_20[DLT_20$Scenario==i,][2:6])
result = get.oc(target = DLT_true, p.true = S,
ncohort=10, cohortsize=3, startdose=1, ntrial=10000)
idx = which(S10 == DLT_true)[1]
PCS_lis[i] = result$selpercent[idx]
}
PCS_lis = rep(0,16)
for (i in 1:nrow(DLT_20)) {
S = as.list(DLT_20[DLT_20$Scenario==i,][2:6])
result = get.oc(target = DLT_true, p.true = S,
ncohort=10, cohortsize=3, startdose=1, ntrial=1000)
idx = which(S == DLT_true)[1]
PCS_lis[i] = result$selpercent[idx]
}
#result = get.oc(target = DLT_true, p.true = S10,
#                ncohort=10, cohortsize=3, startdose=1, ntrial=1000)
PCS_lis
plot(x = (1:16), y = PCS_lis)
plot(x = (1:16), y = PCS_lis, type="o", pch="o", lty=1, ylim=c(0,70),
xlab="Scenario",
ylab="Correct Selection")
length(PCS_lis)
